SPL = decl+
decl = | 'type' id '=' decltype ';' | id '('  funDecl | varDecl
funDecl = fargs '(' vardeclList stmt stmtList
		| fargs '::' funtype '(' vardeclList stmtList
fargs =   ')' | fargs2
fargs2 = id ')' | id ',' fargs2
stmtList = '}' | stmt stmtList
stmt =   'if' '(' exp ')' '{' stmtList 'else' '{' stmtList 
		| 'if' '(' exp ')' '{' stmtList
		| 'while' '(' exp ')' '{' stmtList
		| 'return' ';'
		| 'return' exp ';'
		| id '(' funcall
		| id field '=' exp
		| 'match' exp 'with' caseList
caseList = 
		| '|' exp '->' stmtList caseList
		| '|' exp '->' stmtList ';'
vardeclList = varDecl*
varDecl = 'var' varDeclRest
		| type varDeclRest
varDeclRest = id '=' exp ';'
funtype = '->' rettype | type funtype
decltype =  constructor [constructortype] | type
constructortype = '|' constructor [constructortype]
rettype = 'void' | type
type =    basictype
		| id
		| '(' type , type ')'
		| '[' type ']'
basictype = 'int' | 'bool' | 'char'
exp = expLogical [opColon exp]
expLogical = expEq [opLogical expLogical]
expEq = expPlus [opEq expEq]
expPlus = expTimes [opPlus expPlus]
expTimes = expStrongest [opTimes expTimes]
expStrongest =    int
				| char
				| 'False'
				| 'True'
				| '[]'
				| id funcall
				| id field
				| '(' exp ',' exp ')'
				| '(' exp ')'
				| op1 exp
				| '_'
				| constructor
funcall = ')' | actargs
actargs = exp ')' | exp ',' actargs
field = '.' fieldtoken [field]
fieldtoken = 'hd' | 'tl' | 'fst' | 'snd'
opColon = ':'
opLogical = '||' | '&&'
opEq = '==' | '>=' | '<=' | '!=' | '<' | '>'
opPlus = '+' | '-'
opTimes = '*' | '/' | '%'
op1 = '!' | '-'
int = digit+
id = lowerAlpha ( '_' | alphaNum )*
constructor = capitalAlpha ('_' | alphaNum)*

